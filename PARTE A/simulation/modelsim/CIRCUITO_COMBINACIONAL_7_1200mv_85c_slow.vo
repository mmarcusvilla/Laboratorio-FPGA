// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 32-bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "10/18/2025 17:48:27"

// 
// Device: Altera EP3C120F780C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module CIRCUITO_COMBINACIONAL (
	a,
	b,
	ci,
	s,
	co);
input 	a;
input 	b;
input 	ci;
output 	s;
output 	co;

// Design Ports Information
// s	=>  Location: PIN_AC5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// co	=>  Location: PIN_AB6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// a	=>  Location: PIN_AB5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// b	=>  Location: PIN_AF4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// ci	=>  Location: PIN_AC4,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("CIRCUITO_COMBINACIONAL_7_1200mv_85c_v_slow.sdo");
// synopsys translate_on

wire \s~output_o ;
wire \co~output_o ;
wire \ci~input_o ;
wire \a~input_o ;
wire \b~input_o ;
wire \s~0_combout ;
wire \co~0_combout ;


// Location: IOOBUF_X0_Y5_N16
cycloneiii_io_obuf \s~output (
	.i(\s~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s~output_o ),
	.obar());
// synopsys translate_off
defparam \s~output .bus_hold = "false";
defparam \s~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y4_N9
cycloneiii_io_obuf \co~output (
	.i(\co~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\co~output_o ),
	.obar());
// synopsys translate_off
defparam \co~output .bus_hold = "false";
defparam \co~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y4_N1
cycloneiii_io_ibuf \ci~input (
	.i(ci),
	.ibar(gnd),
	.o(\ci~input_o ));
// synopsys translate_off
defparam \ci~input .bus_hold = "false";
defparam \ci~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y4_N22
cycloneiii_io_ibuf \a~input (
	.i(a),
	.ibar(gnd),
	.o(\a~input_o ));
// synopsys translate_off
defparam \a~input .bus_hold = "false";
defparam \a~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X1_Y0_N1
cycloneiii_io_ibuf \b~input (
	.i(b),
	.ibar(gnd),
	.o(\b~input_o ));
// synopsys translate_off
defparam \b~input .bus_hold = "false";
defparam \b~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y4_N0
cycloneiii_lcell_comb \s~0 (
// Equation(s):
// \s~0_combout  = \ci~input_o  $ (\a~input_o  $ (\b~input_o ))

	.dataa(\ci~input_o ),
	.datab(\a~input_o ),
	.datac(gnd),
	.datad(\b~input_o ),
	.cin(gnd),
	.combout(\s~0_combout ),
	.cout());
// synopsys translate_off
defparam \s~0 .lut_mask = 16'h9966;
defparam \s~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y4_N2
cycloneiii_lcell_comb \co~0 (
// Equation(s):
// \co~0_combout  = (\ci~input_o  & ((\a~input_o ) # (\b~input_o ))) # (!\ci~input_o  & (\a~input_o  & \b~input_o ))

	.dataa(\ci~input_o ),
	.datab(\a~input_o ),
	.datac(gnd),
	.datad(\b~input_o ),
	.cin(gnd),
	.combout(\co~0_combout ),
	.cout());
// synopsys translate_off
defparam \co~0 .lut_mask = 16'hEE88;
defparam \co~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign s = \s~output_o ;

assign co = \co~output_o ;

endmodule
